# Git Config
# By Nefari0uss

[user]
	name = Nefari0uss
	email = nnefari0uss@gmail.com
	signingkey = 2F335BAB

[commit]
	gpgsign = true

[core]
	autocrlf = input # don't do any line ending conversion
	editor = nvim
	pager = delta --dark
	whitespace = trailing-space,space-before-tab
	commitGraph = true
	excludesfile = ~/.gitignore_global

[advice]
	statusHints = yes

[blame]
	date = short
	showEmail = true

[merge]
	tool = vimdiff
	conflictstyle = diff3

[rebase]
	autoStash = true

[status]
	branch = true
	showStash = true
	submoduleSummary = true

[push]
	followTags = true

[help]
	autocorrect = 1

[gpg]
	program = gpg

[color]
	ui = true

	# The basic colors accepted are normal, black, red, green, yellow, blue, magenta, cyan and white.
	# The accepted attributes are bold, dim, ul, blink, reverse, italic, and strike.

[color "branch"]
	current = cyan blue bold ul
	local = blue
	remote = green

[color "diff"]
	new = green bold
	frag = magenta bold
	old = red bold
	meta = 227
	commit = 227 bold
	whitespace = yellow reverse

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "status"]
	added = green bold italic
	changed = cyan bold
	untracked = blue italic
	deleted = magenta strike

[diff]
	algorithm = histogram
	compactionHeuristic = true # should help make diffs nicer
	dirstat = lines
	indentHeuristic = true # help distinguish line changes
	renames = copies # detect copies and renames
	suppressBlankEmpty = true
	tool = vimdiff3

[diff "docx"]
	binary = true
	textconv = docx2txt

[diff "odt"]
	binary = true
	textconv = odt2text

[diff "png"]
	textconv = exiftool

[diff "pdf"]
	binary = true
    textconv = pdf2text

[filter "media"]
	clean    = git media clean %f
	smudge   = git media smudge %f
	required = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process

[rerere] # Reuse recorded resolution of conflicted merges
	enabled = 1

[alias]
	# Common Commands

	# add
	a = add

	# amend
	amend = commit -m --amend
	ammend = amend # spelling is hard

	# bisect
	bs = bisect

	# blame
	bl = blame

	# branch
	b = branch --verbose
	br = branch --remote --verbose

	# checkout
	co = checkout
	cob = checkout -b # new branch
	cb = checkout -b # new branch

	# cherry pick
	cp = cherry-pick

	# clone
	cl = clone

	# commit
	c = commit
	cm = commit -m
	cma = commia -m --amend

	# diff
	d = diff
	dw = diff --ignore-all-space

	# fetch
	f = fetch
	ff = !"git fetch; git new"

	# log
	filelog = log -u

	# merge
	m = merge
	mt = mergetool

	# push and pull
	pl = pull
	pul = pull
	pp = !"git pull; git push"
	pu = push
	pus = push

	# remote
	rem = remote
	r = remote --verbose
	rr = remote rename
	ra = remote add
	rrm = remote remove
	rsu = remote set-url

	# reset
	rst = reset # undo add
	rc = reset --soft HARD^ # undo commit
	rstc = reset --soft HARD^ # undo commit
	resetc = reset --soft HARD^ # undo commit
	undo = reset HEAD~1 --mixed
	unstage = reset HEAD -- # remove files from index (tracking)
	uncommit = reset --soft HEAD^ # go back before last commit, with files in uncommitted state
	undomerge = reset --merge # undo merge and KEEP local changes
	antimerge = reset --merge ORIG_HEAD # undo merge and DISCARD local changes

	# stash
	wip = stash
	pop = stash pop
	sts = stash
	sl = stash list
	sa = stash apply
	ss = stash save
	sp = stash pop

	# status
	s = status --short
	st = status

	# submodule update
	subup = submodule update --init

	# tag
	t = tag
	ts = tag --sign
	tl = tag --list -n1
	td = tag --delete


	# CUSTOM AND COMPLEX COMMANDS


	# history tree
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short

	# list aliases
	al = "!git config -l | grep alias | cut -c 7-"

	# alternative to git reset HEAD --hard; unreachable commit can be found with reflog
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

	# pretty git logs
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative # pretty log
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat # list by author

	# update index
	# http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
	assume   = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed  = "!git ls-files -v | grep ^h | cut -c 3-"
	asc   = update-index --assume-unchanged
	uasc = update-index --no-assume-unchanged
	ascd  = "!git ls-files -v | grep ^h | cut -c 3-"

	# merging/rebasing help - select either ours or theirs for a file
	ours   = "!f() { git checkout --ours $@ && git add $@; }; f"
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

	# save a copy of the current working tree
	snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

	# see what's new
	new = log ORIG_HEAD.. --stat --no-merges --decorate --oneline # list all new commits after a fetch, sans merges

	# go to the root directory
	root = '!echo "I am Groot."; cd "$(git rev-parse --show-toplevel)"'
[credential]
	helper = cache
