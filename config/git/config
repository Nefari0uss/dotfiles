# Git Config
# By Nefari0uss

[user]
	name = Nefari0uss
	email = nnefari0uss@gmail.com
    signingkey = 2F335BAB

[commit]
    gpgsign = true

[core]
    autocrlf = input # don't do any line ending conversion
    editor = nvim
    pager = diff-so-fancy | less --tabs=4 -RFX
    whitespace = trailing-space,space-before-tab

[advice]
    statusHints = yes

[blame]
    date = short
    showEmail = true

[merge]
    tool = vimdiff
    conflictstyle = diff3

[rebase]
    autoStash = true

[status]
    branch = true
    showStash = true
    submoduleSummary = true

[help]
    autocorrect = 1

[gpg]
    program = gpg

[color]
    ui = true

    # The basic colors accepted are normal, black, red, green, yellow, blue, magenta, cyan and white.
    # The accepted attributes are bold, dim, ul, blink, reverse, italic, and strike.

[color "branch"]
    current = cyan blue bold ul
    local = blue
    remote = green

[color "diff"]
	new = green bold
	frag = magenta bold
	old = red bold
	meta = 227
	commit = 227 bold
	whitespace = yellow reverse

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "status"]
    added = green bold italic
    changed = cyan bold
    untracked = blue italic
    deleted = magenta strike

[diff]
    algorithm = histogram
    compactionHeuristic = true # should help make diffs nicer
    dirstat = lines
    indentHeuristic = true # help distinguish line changes
    renames = copies # detect copies and renames
    suppressBlankEmpty = true
    tool = vimdiff3

[diff "docx"]
    binary = true
    textconv = docx2txt

[diff "odt"]
    binary = true
    textconv = $HOME/bin/odt-to-text.perl

[diff "png"]
    textconv = exiftool

[filter "media"]
	clean     = git media clean %f
	smudge    = git media smudge %f
	required  = true

[filter "lfs"]
	clean     = git-lfs clean %f
	smudge    = git-lfs smudge %f
    required = true

[alias]
    # Common Commands

    # status
    s = status --short
    st = status

    # branch
    b = branch --verbose
    br = branch --remote --verbose

    # commit
    c = commit
    cm = commit -m
    cma = commia -m --amend

    # amend
    amend = commit -m --amend
    ammend = amend # spelling is hard

    # checkout
    co = checkout
    cob = checkout -b # new branch
    cb = checkout -b # new branch

    # diff
    d = diff
    dw = diff --ignore-all-space

    # fetch
    f = fetch
    ff = !"git fetch; git new"

    # merge
    m = merge

    # stash
    wip = stash
    sts = stash
    stl = stash list
    sl = stash list
    pop = stash pop
    sp = stash pop

    # cherry pick
    cp = cherry-pick

    # bisect
    bs = bisect

    # blame
    bl = blame

    # push and pull
    pp = !"git pull; git push"
    pu = push
    pl = pull

    # Remote
    rem = remote
    r = remote --verbose
    rr = remote rename
    ra = remote add
    rrm = remote remove
    rsu = remote set-url

    # undo
    undo = reset HEAD~1 --mixed
    unstage = reset HEAD --

    # submodule update
    subup = submodule update --init

    # history tree
    hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short

    # list aliases
    al = "!git config -l | grep alias | cut -c 7-"

    # alternative to git reset HEAD --hard; unreachable commit can be found with reflog
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

    # pretty git logs
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative # pretty log
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate # single line
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat # list by author
    llnc = log --pretty=format:"%h\\ %s\\ [%cn]" # list by author, no colors

    # update index
    # http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    assume   = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed  = "!git ls-files -v | grep ^h | cut -c 3-"

    # merging/rebasing help
    ours   = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    # see what's new
    new = log ORIG_HEAD.. --stat --no-merges --decorate --oneline # list all new commits after a fetch, sans merges


