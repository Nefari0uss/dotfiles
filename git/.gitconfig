# Git Config
# By Nefari0uss

[user]
	name = Nefari0uss
	email = nnefari0uss@gmail.com
	signingkey = 2F335BAB

[core]
	autocrlf = input
	editor = $EDITOR
	pager = delta
	whitespace = trailing-space,space-before-tab
	commitGraph = true
	excludesfile = ~/.config/git/gitignore

[blame]
  coloring = highlightRecent
	date = short
	showEmail = true

[branch]
  sort = committerdate

[checkout]
  guess = true

[clean]
  requireForce = true

[color]
	ui = true

	# The basic colors accepted are normal, black, red, green, yellow, blue, magenta, cyan and white.
	# The accepted attributes are bold, dim, ul, blink, reverse, italic, and strike.

[color "branch"]
	current = 6 normal reverse
	local = 6 normal
	remote = 5 normal
	plain = 6 normal
	upstream = 5 normal

[color "diff"]
	new = 15 2
	frag = normal dim
	old = 7 1
	meta = normal dim
	commit = 3 normal
	whitespace = normal 9
	newMoved = 15 3
	oldMovedAlternativeDimmed = 7 5 dim
	oldMovedAlternative = 7 5
	contextBold = normal bold
	newBold = 15 2 bold
	context = normal
	oldMoved = 7 3
	oldBold = 7 1 bold
	newMovedDimmed = 15 3 dim
	func = normal dim
	newDimmed = 15 2 dim
	newMovedAlternative = 15 5
	newMovedAlternativeDimmed = 15 5 dim
	oldMovedDimmed = 7 3 dim
	oldDimmed = 7 1 dim

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "status"]
	added = 10 normal
	changed = 11 normal
	untracked = normal dim
	deleted = magenta strike
	branch = 6 normal
	updated = 10 normal
	localbranch = 6 normal
	header = normal
	remotebranch = 5 normal
	nobranch = 1 normal italic
	unmerged = 9 normal

[column]
  ui = auto

[commit]
	gpgsign = false

[credential]
	helper = cache

[delta]
	line-numbers = true
	navigate = true
	side-by-side = true
  features = decorations
  hyperlinks = true
  hyperlinks-file-link-prefix = "vscode://file/{path}:{line}"
  true-color = always

[diff]
	algorithm = histogram
  autoRefreshIndex = true
	compactionHeuristic = true
  context = 5
	dirstat = lines,3,cumulative
	indentHeuristic = true
	renames = copies
	suppressBlankEmpty = true
	tool = vimdiff3
  wsErrorHighlight = all
	colorMoved = zebra

[diff "docx"]
	binary = true
	textconv = docx2txt

[diff "odt"]
	binary = true
	textconv = odt2text

[diff "png"]
	textconv = exiftool

[fetch]
  prune = true
  pruneTags = true

[filter "media"]
	clean = git media clean %f
	smudge = git media smudge %f
	required = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process

[gc]
  autoDetach = true

[gpg]
	program = gpg2

[help]
	autocorrect = -1
  browser = firefox
  format = man

[init]
	defaultBranch = master

[log]
  date = relative
  decorate = true

[maintenance]
	repo = /home/nefari0uss/projects/dotfiles

[merge]
	conflictstyle = diff3
	tool = vimdiff

[pager]
  diff = delta
  show = delta
  log = delta
  blame = delta
  reflog = delta

[pull]
	rebase = false

[push]
  autoSetupRemote = true
  default = simple
	followTags = true

[rebase]
	autoStash = true

[rerere]
	enabled = true

[showBranch]
  default = always

[status]
	branch = true
	showStash = true
	submoduleSummary = true
  aheadBehind = true
  showUntrackedFiles = all

[alias]
	# Common Commands

	# add
	a = add

	# bisect
	bs = bisect

	# blame
  # https://youtu.be/aolI_Rz0ZqY?si=5pgYYl8dzyy1L_lP&t=582
  # -w will ignore whitespace
  # -C will detect lines moved or copied in the same commit
  # -C again will also detect the commit that created the file
  # -C for a *third* taime will determine if it was changed in any commit at all
  # WTF Git.
	bl = blame -w -C -C -C

  # blame just a "L"ittle
  # follow it up with two line numbers for a range
  # git blame -L 1,5:file.txt
  bll = blame -w -C -C -C -L

	# branch
	b = branch
	br = branch --remote

	# checkout
	co = checkout
	cob = checkout -b # new branch

	# cherry pick
	cp = cherry-pick

	# clone
	cl = clone

	# commit
	c = commit
	cm = commit -m
	cma = commia -m --amend

	# diff
	d = diff

	# fetch
	f = fetch --all

	# log
	filelog = log -u --follow
  pickaxe = log -S

	# merge
	m = merge
	mt = mergetool

	# push and pull
	pl = pull
	pp = !"git pull; git push"
	pu = push

	# remote
	r = remote --verbose
	rname = remote rename
	ra = remote add
	rdel = remote remove
	rurl = remote set-url

	# reset
	rst = reset # undo add
	undo = reset HEAD~1 --mixed
	unstage = reset HEAD -- # remove files from index (tracking)
	uncommit = reset --soft HEAD^ # go back before last commit, with files in uncommitted state
	undomerge = reset --merge # undo merge and KEEP local changes
	antimerge = reset --merge ORIG_HEAD # undo merge and DISCARD local changes

	# stash
	wip = stash -u
	pop = stash pop
	sl = stash list
	sa = stash apply
	ss = stash save
	sp = stash pop

	# status
	s = status --short
	st = status

	# submodule update
	subup = submodule update --init

	# tag
	t = tag
	ts = tag --sign
	tl = tag --list -n1
	td = tag --delete


	# CUSTOM AND COMPLEX COMMANDS

	# history tree
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short

	# list aliases
	alist = "!git config -l | grep alias | cut -c 7-"

	# alternative to git reset HEAD --hard; unreachable commit can be found with reflog
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

	# pretty git logs
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative # pretty log
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat # list by author

	# update index
	# http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
	assume   = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed  = "!git ls-files -v | grep ^h | cut -c 3-"
	asc   = update-index --assume-unchanged
	uasc = update-index --no-assume-unchanged
	ascd  = "!git ls-files -v | grep ^h | cut -c 3-"

	# merging/rebasing help - select either ours or theirs for a file
	ours   = "!f() { git checkout --ours $@ && git add $@; }; f"
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

	# save a copy of the current working tree
	snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

	# see what's new
	new = log ORIG_HEAD.. --stat --no-merges --decorate --oneline # list all new commits after a fetch, sans merges

	# go to the root directory
	root = '!echo "I am Groot."; cd "$(git rev-parse --show-toplevel)"'
[color "remote"]
	hint = normal dim
	success = 2 normal
	error = 1 normal
	warning = 3 normal
[color "interactive"]
	header = normal dim bold
	prompt = 15 4
	help = normal dim
	error = 1 normal italic
[color "decorate"]
	branch = 6 normal
	tag = 3 normal
	remotebranch = 5 normal
	stash = normal dim
	grafted = 1 normal italic
	HEAD = 6 normal italic
